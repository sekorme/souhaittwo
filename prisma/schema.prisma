// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  dateOfBirth  DateTime
  country      String
  city         String
  email        String?       @unique
  phoneNumber  String?       @unique
  password     String?
  isVerified   Boolean       @default(false)
  isAdmin      Boolean       @default(false)
  subscription Subscription?
  savedJobs    SavedJob[]
  likedJobs    LikedJob[]
  appointments Appointment[]
  accounts     Account[]
  sessions     Session[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  jobs Job[] @relation("UserJobs")
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Job {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  salary      String
  country     String
  jobType     String // Remote or On-site
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  savedBy     SavedJob[]
  likedBy     LikedJob[]
  userId      String?    @db.ObjectId
  user        User?      @relation("UserJobs", fields: [userId], references: [id])
}

model Appointment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  status    String   @default("scheduled") // scheduled, canceled, completed
  createdAt DateTime @default(now())
}

model SavedJob {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  jobId  String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  job    Job    @relation(fields: [jobId], references: [id])
}

model LikedJob {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  jobId  String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  job    Job    @relation(fields: [jobId], references: [id])
}
